#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform samplerCube inEnvironmentMap;

layout (push_constant) uniform PushConstants 
{
	float roughness;
	float pad0, pad1, pad2;
} constants;

layout (set = 0, binding = 1) writeonly uniform imageCube outPrefilteredMap;

#define PI 3.14159265358979

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return num / denom;
}

float RadicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness*roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

void main() 
{
	ivec3 texelCoord = ivec3(gl_GlobalInvocationID);
	ivec2 size = imageSize(outPrefilteredMap);

	if(texelCoord.x < size.x && texelCoord.y < size.y && texelCoord.z < 6)
	{
		// first convert cubemap point coords to direction vector
		vec3 v;
		vec3 p = texelCoord;
		vec2 s = size;
		switch (texelCoord.z)
		{
			case 0: 
				v = normalize(vec3(0.5, 1 - p.y / s.y - 0.5, 1 - p.x / s.x - 0.5));
				break;
			case 1:
				v = normalize(vec3(-0.5, 1 - p.y / s.y - 0.5, p.x / s.x - 0.5));
				break;
			case 2:
				v = normalize(vec3(p.x / s.x - 0.5, 0.5, p.y / s.y - 0.5));
				break;
			case 3:
				v = normalize(vec3(p.x / s.x - 0.5, -0.5, 1 - p.y / s.y - 0.5));
				break;
			case 4:
				v = normalize(vec3(p.x / s.x - 0.5, 1 - p.y / s.y - 0.5, 0.5));
				break;
			case 5:
				v = normalize(vec3(1 - p.x / s.x - 0.5, 1 - p.y / s.y - 0.5, -0.5));
				break;
		}

		const uint SAMPLE_COUNT = 1024u;
		float totalWeight = 0.0;
		vec3 prefilteredColor = vec3(0.0);

		for (uint i = 0u; i < SAMPLE_COUNT; i++)
		{
			vec2 Xi = Hammersley(i, SAMPLE_COUNT);
			vec3 H = ImportanceSampleGGX(Xi, v, constants.roughness);
			vec3 L = normalize(2.0 * dot(v, H) * H - v);

			float NdotL = max(dot(v, L), 0.0);
			if (NdotL > 0.0)
			{
				float D = DistributionGGX(v, H, constants.roughness);
				float NdotH = max(dot(v, H), 0.0);
				float HdotV = max(dot(H, v), 0.0);
				float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;

				float resolution = float(textureSize(inEnvironmentMap, 0).x);
				float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
				float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

				float mipLevel = constants.roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);
				
				prefilteredColor += textureLod(inEnvironmentMap, L, mipLevel).rgb * NdotL;
				totalWeight += NdotL;
			}
		}
		prefilteredColor = prefilteredColor / totalWeight;

		imageStore(outPrefilteredMap, texelCoord, vec4(prefilteredColor, 1));
	}
}