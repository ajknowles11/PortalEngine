#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D inHDRI;

layout(rgba16f, set = 0, binding = 1) uniform imageCube image;

const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 CubemapToHDRI(ivec3 p, ivec2 size)
{
	// first convert cubemap point coords to direction vector
	vec3 v;
	switch (p.z)
	{
		case 0: 
			v = normalize(vec3(0.5, p.y / size.y - 0.5, 1 - p.x / size.x - 0.5));
			break;
		case 1:
			v = normalize(vec3(0.5, p.y / size.y - 0.5, p.x / size.x - 0.5));
			break;
		case 2:
			v = normalize(vec3(p.x / size.x - 0.5, 0.5, 1 - p.y / size.y - 0.5));
			break;
		case 3:
			v = normalize(vec3(p.x / size.x - 0.5, -0.5, p.y / size.y - 0.5));
			break;
		case 4:
			v = normalize(vec3(p.x / size.x - 0.5, p.y / size.y - 0.5, 0.5));
			break;
		case 5:
			v = normalize(vec3(1 - p.x / size.x - 0.5, p.y / size.y - 0.5, 0.5));
			break;
	}

	vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}

void main() 
{
	ivec3 texelCoord = ivec3(gl_GlobalInvocationID);
	ivec2 size = imageSize(image);

	if(texelCoord.x < size.x && texelCoord.y < size.y && texelCoord.z < 6)
	{
		vec2 uv = CubemapToHDRI(texelCoord, size);
		vec3 color = texture(inHDRI, uv).rgb;
		imageStore(image, texelCoord, vec4(color, 1));
	}
}